package io.crocker.euler.problem8;

/**
 * Problem 8: Largest Product in a Series
 * 
 * The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
 * 
 * Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
 * 
 * @author joshu
 *
 */
public class Problem8 {
	private String number = "731671765313306249192251196744265747423553491949349698352031277450632623957831801698480186"
			+ "94788518438586156078911294949545950173795833195285320880551112540698747158523863050715693290963295227443"
			+ "04355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387"
			+ "49303589072962904915604407723907138105158593079608667017242712188399879790879227492190169972088809377665"
			+ "72733300105336788122023542180975125454059475224352584907711670556013604839586446706324415722155397536978"
			+ "17977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048"
			+ "44031998900088952434506585412275886668811642717147992444292823086346567481391912316282458617866458359124"
			+ "56652947654568284891288314260769004224219022671055626321111109370544217506941658960408071984038509624554"
			+ "44362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754"
			+ "100225698315520005593572972571636269561882670428252483600823257530420752963450";
	
	public static void main(String[] args) {
		Problem8 problem8 = new Problem8();
		
		int i = 13;
		System.out.println("x = " + i + ": " + String.valueOf(problem8.LargestConsecutiveProduct(i)));
	}
	
	public long LargestConsecutiveProduct(int x) {
		long largest = 0;
		long product = 1;
		char[] chars = new char[x];
		
		for (int i = 0; i < this.number.length() - x; i++) {
			product = 1;
			this.number.getChars(i, i + x, chars, 0);
			
			for (int y = 0; y < x; y++) {
				product *= Integer.parseInt(String.valueOf(chars[y]));
			}
			
			if (product > largest) {
				largest = product;
			}
		}
		
		return largest;
		
	}
}
